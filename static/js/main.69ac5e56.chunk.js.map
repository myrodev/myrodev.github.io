{"version":3,"sources":["components/Title.js","components/SearchForm.js","components/Movie.js","components/MoviesList.js","pages/Home.js","components/ButtonBackToHome.js","pages/Detail.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Title","children","className","SearchForm","state","inputMovie","_handleChange","event","setState","target","value","_handleSubmit","e","preventDefault","fetch","then","res","json","results","Search","totalResults","console","log","props","onResults","catch","error","onSubmit","this","name","onChange","type","placeholder","Component","Movie","id","poster","title","year","to","process","src","alt","MoviesList","movies","map","movie","key","imdbID","Year","Poster","Home","usedSearch","_handleResults","length","_renderResults","ButtonBackToHome","role","Detail","movieId","match","params","_fetchMovie","Actors","Metascore","Plot","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wTAiCaA,EAAQ,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACjB,wBAAIC,UAAU,SAASD,IC9BdE,EAAb,2MAEIC,MAAQ,CACJC,WAAY,IAHpB,EASIC,cAAgB,SAACC,GACb,EAAKC,SAAS,CAAEH,WAAYE,EAAME,OAAOC,SAVjD,EA0BIC,cAAgB,SAACC,GAEbA,EAAEC,iBAFiB,IAGXR,EAAe,EAAKD,MAApBC,WAERS,MAAM,mCAAD,OAjCG,WAiCH,cAAiDT,IAEjDU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAW,MAO+BA,EAApCC,cAPK,MAOI,GAPJ,IAO+BD,EAAvBE,oBAPR,MAOuB,IAPvB,EAQbC,QAAQC,IAAI,CAAEH,SAAQC,iBACtB,EAAKG,MAAMC,UAAUL,MAExBM,OAAM,SAAAC,GAAK,OAAIL,QAAQC,IAAII,OA7CxC,wEAkDQ,OAII,0BAAMC,SAAUC,KAAKjB,eACjB,yBAAKT,UAAU,oBACX,yBAAKA,UAAU,WACX,2BACI2B,KAAK,aACL3B,UAAU,QACV4B,SAAUF,KAAKtB,cACfyB,KAAK,OACLC,YAAY,qBAEpB,yBAAK9B,UAAU,WACX,4BAAQA,UAAU,kBAAlB,iBAjExB,GAAgC+B,aCCnBC,EAAb,iLAQc,IAAD,EAE+BN,KAAKL,MAAjCY,EAFH,EAEGA,GAAIC,EAFP,EAEOA,OAAQC,EAFf,EAEeA,MAAOC,EAFtB,EAEsBA,KAE3B,OAEI,kBAAC,IAAD,CAAMC,GAAE,UAAKC,gBAAL,mBAAsCL,GAAMjC,UAAU,QAA9D,KACI,yBAAKA,UAAU,cACX,4BAAQA,UAAU,iBACd,yBACAuC,IAAKL,EACLM,IAAKL,MAGb,yBAAKnC,UAAU,gBACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,iBACX,uBAAGA,UAAU,cAAcmC,GAC3B,uBAAGnC,UAAU,iBAAiBoC,YA1B1D,GAA2BL,aCDdU,EAAb,iLAMc,IAEEC,EAAWhB,KAAKL,MAAhBqB,OACR,OACI,yBAAK1C,UAAU,cAEP0C,EAAOC,KAAI,SAAAC,GACP,OACI,yBAAKC,IAAKD,EAAME,OAAQ9C,UAAU,mBAC9B,kBAAC,EAAD,CACIiC,GAAIW,EAAME,OACVX,MAAOS,EAAM9C,MACbsC,KAAMQ,EAAMG,KACZb,OAAQU,EAAMI,kBAnBlD,GAAgCjB,aCEnBkB,EAAb,2MAEI/C,MAAQ,CAAEgD,YAAY,EAAOlC,QAAS,IAF1C,EAKImC,eAAiB,SAACnC,GACd,EAAKV,SAAS,CAAEU,UAASkC,YAAY,KAN7C,gFAWQ,OAAqC,IAA9BxB,KAAKxB,MAAMc,QAAQoC,OACtB,0DACA,kBAAC,EAAD,CAAYV,OAAQhB,KAAKxB,MAAMc,YAb3C,+BAkBQ,OAEI,6BACI,kBAAC,EAAD,sBACR,yBAAKhB,UAAU,sBACb,kBAAC,EAAD,CAAYsB,UAAWI,KAAKyB,kBAG7BzB,KAAKxB,MAAMgD,WACRxB,KAAK2B,iBACL,sEA5BZ,GAA0BtB,aCFbuB,EAAmB,WAC9B,OAAO,kBAAC,IAAD,CAAMtD,UAAU,iBACrBqC,GAAE,UAAKC,gBAAL,KACFiB,KAAK,UAFA,kBCCIC,EAAb,2MAWItD,MAAQ,CAAE0C,MAAO,IAXrB,8EAayB,IAAD,OAANX,EAAM,EAANA,GACVrB,MAAM,mCAAD,OAhBG,WAgBH,cAAiDqB,IAEjDpB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA+B,GAEF,EAAKtC,SAAS,CAAEsC,UAChBzB,QAAQC,IAAI,CAAEwB,aAGjBrB,OAAM,SAAAC,GAAK,OAAIL,QAAQC,IAAII,QAvBxC,0CA2ByB,IACTiC,EAAY/B,KAAKL,MAAMqC,MAAMC,OAA7BF,QACRtC,QAAQC,IAAIM,KAAKL,OACjBK,KAAKkC,YAAY,CAAE3B,GAAIwB,MA9B/B,+BAkCc,IAAD,EAE8C/B,KAAKxB,MAAM0C,MAAtD9C,EAFH,EAEGA,MAAOkD,EAFV,EAEUA,OAAQa,EAFlB,EAEkBA,OAAQC,EAF1B,EAE0BA,UAAWC,EAFrC,EAEqCA,KAE1C,OACI,6BACI,4BAAKjE,GACL,yBAAKyC,IAAKS,EAAQR,IAAM1C,IACxB,4BAAK+D,GACL,8BAAOC,GACP,2BAAIC,GACJ,kBAAC,EAAD,WA7ChB,GAA4BhC,aCFfiC,EAAW,WACrB,OAAO,6BACF,wBAAIhE,UAAU,SAAd,QACA,wBAAIA,UAAU,YAAd,8CACA,kBAAC,EAAD,QC+BOiE,G,6LAlBX,OADA9C,QAAQC,IAAIkB,iBAEV,yBAAKtC,UAAU,OACd,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAOkE,OAAK,EAACC,KAAI,UAAK7B,gBAAL,KAAgC8B,UAAWnB,IAC5D,kBAAC,IAAD,CAAOkB,KAAI,UAAK7B,gBAAL,oBAA+C8B,UAAWZ,IACtE,kBAAC,IAAD,CAAOY,UAAWJ,U,GAfTjC,cCCEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASd,MACvB,2DCVNe,IAASC,OAIL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDoHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlE,MAAK,SAAAmE,GACjCA,EAAaC,kB","file":"static/js/main.69ac5e56.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// así sería realmente\r\n// export default (props) =>  (\r\n//     <h1 class=\"title\">{props.title}</h1>\r\n// )\r\n\r\n//Luego con destructuracion\r\n// export default ({title}) =>  (\r\n//     <h1 class=\"title\">{title}</h1>\r\n// )\r\n\r\n//Luego creamos un export nombrado\r\n// asi cuando lo llamamos siempre usamos el \r\n//mismo nombre\r\n\r\n// export const Title = ({title}) =>  (\r\n//     <h1 class=\"title\">{title}</h1>\r\n// )\r\n\r\n//Luego usando className\r\n\r\n// export const Title = ({title}) =>  (\r\n//     <h1 className=\"title\">{title}</h1>\r\n// )\r\n\r\n\r\n// En vez de usar el nombre de prop igual\r\n// al nombre del componente usamos la prop\r\n// especial children, de forma q el título\r\n// será lo que envolvamos en nuestro componente\r\n//title\r\n\r\nexport const Title = ({children}) =>  (\r\n    <h1 className=\"title\">{children}</h1>\r\n)\r\n","import React, { Component } from 'react'\r\n\r\nconst API_KEY = '3d868205'\r\n\r\nexport class SearchForm extends Component {\r\n\r\n    state = {\r\n        inputMovie: ''\r\n    }\r\n\r\n    // usamos arrow para acceder al contexto de this del setstate\r\n    // evento al q llamamos, tarjet el elemento q tiene el evento\r\n\r\n    _handleChange = (event) => {\r\n        this.setState({ inputMovie: event.target.value })\r\n        //console.log(this.state.inputMovie)\r\n    }\r\n\r\n    // // En el caso de tener más de un campo se podria optar por:\r\n    // _handleChange = (event) => {\r\n    //     const { name, value } = event.target;\r\n    //     console.log(name)\r\n    //     console.log(value)\r\n    //     this.setState({\r\n    //         [name]: value\r\n    //     })\r\n\r\n    // }\r\n\r\n\r\n    _handleSubmit = (e) => {\r\n        //sobreescribmos el evento predefinido del envio del form\r\n        e.preventDefault()\r\n        const { inputMovie } = this.state\r\n\r\n        fetch(`https://www.omdbapi.com/?apikey=${API_KEY}&s=${inputMovie}`)\r\n\r\n            .then(res => res.json())\r\n            .then(results => {\r\n                //    console.log(results)\r\n                //este componente solo se deberia encargar de hacer la busqueda\r\n                //pero no de mostrar los resultados\r\n\r\n                // acá les estamos dando un valor por defecto, por si llega a dar undefined\r\n                //se quedan con esos valores\r\n                const { Search = [], totalResults = \"0\" } = results\r\n                console.log({ Search, totalResults })\r\n                this.props.onResults(Search)\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            //queremos controlar cuando hacemos un submit en este form\r\n            // como no especificamos qué elemento hace el submit, el\r\n            // button del form lo hace por defecto\r\n            <form onSubmit={this._handleSubmit}>\r\n                <div className=\"field has-addons\">\r\n                    <div className=\"control\">\r\n                        <input\r\n                            name=\"inputMovie\"\r\n                            className=\"input\"\r\n                            onChange={this._handleChange}\r\n                            type=\"text\"\r\n                            placeholder=\"Movie to search\" />\r\n                    </div>\r\n                    <div className=\"control\">\r\n                        <button className=\"button is-info\">\r\n                            Search\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport class Movie extends Component {\r\n    static propTypes = {\r\n        id: PropTypes.string,\r\n        title: PropTypes.string,\r\n        year: PropTypes.string,\r\n        poster: PropTypes.string\r\n    }\r\n\r\n    render() {\r\n\r\n        const { id, poster, title, year } = this.props\r\n\r\n        return (\r\n            // <Link to={`/detail/${id}`} className=\"grid__item\">\r\n            <Link to={`${process.env.PUBLIC_URL}/detail/${id}`} className=\"card\"> }\r\n                <div className=\"card-image\">\r\n                    <figure className=\"image is-4by3\">\r\n                        <img                         \r\n                        src={poster}\r\n                        alt={title} />\r\n                    </figure>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    <div className=\"media\">                        \r\n                        <div className=\"media-content\">\r\n                            <p className=\"title is-4\">{title}</p>\r\n                            <p className=\"subtitle is-6\">{year}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        )\r\n\r\n\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Movie } from './Movie'\r\n\r\nexport class MoviesList extends Component {\r\n\r\n    static propTypes = {\r\n        movies: PropTypes.array\r\n    }\r\n\r\n    render() {\r\n\r\n        const { movies } = this.props\r\n        return (\r\n            <div className=\"MoviesList\">\r\n                {\r\n                    movies.map(movie => {\r\n                        return (\r\n                            <div key={movie.imdbID} className=\"MoviesList-item\">\r\n                                <Movie\r\n                                    id={movie.imdbID}\r\n                                    title={movie.Title}\r\n                                    year={movie.Year}\r\n                                    poster={movie.Poster}\r\n                                />\r\n                            </div>\r\n                        )\r\n                    })}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Title } from '../components/Title'\r\nimport { SearchForm } from '../components/SearchForm'\r\nimport { MoviesList } from '../components/MoviesList'\r\n\r\n\r\nexport class Home extends Component{\r\n\r\n    state = { usedSearch: false, results: [] }\r\n\r\n\r\n    _handleResults = (results) => {\r\n        this.setState({ results, usedSearch: true })\r\n      }\r\n    \r\n    \r\n      _renderResults() {\r\n        return this.state.results.length === 0\r\n          ? <p> Sorry, results not found! </p>\r\n          : <MoviesList movies={this.state.results} />\r\n        \r\n      }\r\n\r\n    render (){\r\n        return (\r\n\r\n            <div>\r\n                <Title>Search Movies</Title>\r\n        <div className=\"SearchForm-wrapper\">\r\n          <SearchForm onResults={this._handleResults} />\r\n        </div>\r\n\r\n        {this.state.usedSearch\r\n          ? this._renderResults()\r\n          : <small>Use the form to search a movie</small>\r\n        }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n//componente stateless\r\nexport const ButtonBackToHome = () => {\r\n  return <Link className=\"button is-info\"\r\n    to={`${process.env.PUBLIC_URL}/`}\r\n    role=\"button\">\r\n    Volver a home\r\n    \r\n    </Link>\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { ButtonBackToHome } from '../components/ButtonBackToHome'\r\n\r\nconst API_KEY = '3d868205'\r\n\r\nexport class Detail extends Component {\r\n    static propTypes = {\r\n        \r\n        match: PropTypes.shape({\r\n            params:PropTypes.object,\r\n            isExact: PropTypes.bool,\r\n            path: PropTypes.string,\r\n            url: PropTypes.string\r\n        })\r\n    }\r\n\r\n    state = { movie: {} }\r\n\r\n    _fetchMovie({ id }) {\r\n        fetch(`https://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`)\r\n\r\n            .then(res => res.json())\r\n            .then(movie => {\r\n\r\n                this.setState({ movie })\r\n                console.log({ movie })\r\n                // this.props.onResults(Search)\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        const { movieId } = this.props.match.params\r\n        console.log(this.props)\r\n        this._fetchMovie({ id: movieId })\r\n    }\r\n\r\n    \r\n    render() {\r\n\r\n        const { Title, Poster, Actors, Metascore, Plot } = this.state.movie\r\n\r\n        return (\r\n            <div>\r\n                <h1>{Title}</h1>\r\n                <img src={Poster} alt ={Title} />\r\n                <h3>{Actors}</h3>\r\n                <span>{Metascore}</span>\r\n                <p>{Plot}</p>\r\n                <ButtonBackToHome />           \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Detail","import React from 'react'\r\nimport { ButtonBackToHome } from '../components/ButtonBackToHome'\r\n\r\n\r\nexport const NotFound = () => {\r\n   return <div>\r\n        <h1 className=\"title\">404!</h1>\r\n        <h2 className=\"subtitle\">No existe la página!! Ya estoy harta!!!</h2>\r\n        <ButtonBackToHome />           \r\n    </div>\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Switch, Route } from 'react-router-dom'\r\n\r\nimport { Home } from './pages/Home'\r\nimport { Detail } from './pages/Detail'\r\nimport {NotFound} from './pages/NotFound'\r\n\r\nimport './App.css';\r\nimport 'bulma/css/bulma.css'\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n\r\n    // const url = new URL(document.location)\r\n\r\n    // const Page = url.searchParams.has('id')\r\n    //  ? <Detail id={url.searchParams.get('id')} />\r\n    //  : <Home />\r\n    console.log(process.env.PUBLIC_URL) \r\n    return (\r\n      <div className=\"App\">\r\n       <Switch>\r\n          <Route exact path={`${process.env.PUBLIC_URL}/`} component={Home} />\r\n          <Route path={`${process.env.PUBLIC_URL}/detail/:movieId`} component={Detail} />\r\n         <Route component={NotFound}/>\r\n       </Switch>\r\n\r\n       {/* <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/detail/:movieId\" component={Detail} />\r\n          <Route component={NotFound}/>\r\n        </Switch> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    // <BrowserRouter >\r\n    //     <App />\r\n    // </BrowserRouter>, \r\n    <HashRouter >\r\n        <App />\r\n    </HashRouter>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}