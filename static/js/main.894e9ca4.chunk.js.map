{"version":3,"sources":["utils/not-found.jpg","utils/logo.svg","history.js","API/index.js","context/MoviesContext.js","components/Movie.js","context/SearchContext.js","components/Search.js","containers/Title.js","containers/Header.js","context/CategoriesContext.js","context/GenresContext.js","components/Sidebar.js","containers/Container.js","containers/Pagination.js","components/ListMovie.js","containers/Discover.js","components/DetailMovie.js","containers/NotFound.js","components/SearchMovie.js","components/Genres.js","context/SeriesContext.js","components/Series.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createBrowserHistory","axios","create","baseURL","process","params","api_key","ContextMovies","React","createContext","displayName","MoviesContext","props","useState","loading","setLoading","movies","setMovies","pagination","setPagination","current","setCurrent","useEffect","a","API","get","response","console","log","status","data","results","length","fetchApi","Provider","value","page","nextPage","prevPage","getCurrent","id","children","Movie","title","url","useContext","to","className","onClick","src","imgNotFound","alt","ContextSearch","SearchContext","query","setQuery","fetch","json","getQuery","q","withRouter","history","input","setInput","showSearch","setShowSearch","refInput","useRef","node","document","addEventListener","handleClick","removeEventListener","e","contains","target","focus","onSubmit","preventDefault","push","ref","type","placeholder","onChange","Title","subtitle","Header","ContextCategories","CategoriesContext","genres","setGenres","ContextGenres","GenresContext","genre","setGenre","genresMovies","setGenresMovies","getGenre","Sidebar","contextCategories","contextGenres","logo","style","margin","map","name","toLowerCase","key","Pagination","contextMovies","ListMovie","Container","movie","poster_path","Discover","DetailMovie","setMovie","backdrop_path","overview","image","SearchMovie","contextSearch","Genres","find","g","ContextSeries","SeriesContext","series","setSeries","Series","App","path","exact","component","NotFound","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.894e9ca4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/not-found.9082a057.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.94b4833f.svg\";","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: process.env.REACT_APP_URL,\n  params: {api_key: 'bf7a0d7e84fbc649f8d6f2819491a0d6'}\n  // params: { api_key: process.env.REACT_APP_API_KEY}\n});","import React, { useState, useEffect } from 'react';\nimport API from '../API/index';\n\nexport const ContextMovies = React.createContext();\nContextMovies.displayName = 'ContextMovies';\n\nconst MoviesContext = props => {\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n  const [pagination, setPagination] = useState(1);\n  const [current, setCurrent] = React.useState('');\n  const getCurrent = id => {\n    setCurrent(id);\n  };\n\n  useEffect(() => {\n    const fetchApi = async () => {\n      // const url = `${API}/discover/movie?language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=${pagination}`\n\n      const response = await API.get(\n        `/discover/movie?sort_by=popularity.desc&page=${pagination}&api_key=${process.env.REACT_APP_API_KEY}`\n      );\n      console.log(response);\n      if (response.status !== 200 || response.data.results.length <= 0) return;\n\n      setMovies(response.data.results);\n      setLoading(false);\n    };\n\n    fetchApi();\n  }, [pagination]);\n\n  const nextPage = () => setPagination(pagination + 1);\n  const prevPage = () => setPagination(pagination - 1);\n\n  return (\n    <ContextMovies.Provider\n      value={{\n        loading: loading,\n        movies: movies,\n        page: pagination,\n        current: current,\n        nextPage: nextPage,\n        prevPage: prevPage,\n        getCurrent: getCurrent\n      }}\n    >\n      {props.children}\n    </ContextMovies.Provider>\n  );\n};\n\nexport default MoviesContext;\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport imgNotFound from '../utils/not-found.jpg';\nimport { ContextMovies } from '../context/MoviesContext';\n\nconst Movie = ({ title, url, id }) => {\n  const { getCurrent } = useContext(ContextMovies);\n\n  return (\n    <Link to={`/detail-movie/${id}`}>\n      <section className=\"wrapper__movies-item\" onClick={() => getCurrent(id)}>\n        <img\n          src={url ? `https://image.tmdb.org/t/p/original/${url}` : imgNotFound}\n          alt={title}\n        />\n        <h2>{title} </h2>\n        <i className=\"far fa-heart\"></i>\n      </section>\n    </Link>\n  );\n};\n\nexport default Movie;\n","import React, { createContext, useState, useEffect } from 'react';\n\nexport const ContextSearch = createContext();\nconst SearchContext = ({ children }) => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const fetchApi = async () => {\n      if(!query) return;      \n      const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=bf7a0d7e84fbc649f8d6f2819491a0d6&language=en-US&query=${query}&page=1&include_adult=false`);\n      const data = await response.json();\n      console.log(response.status)\n      if(response.status !== 200) return;\n  \n      setMovies(data.results);\n    }\n\n    fetchApi()\n  }, [query]);\n\n  return <ContextSearch.Provider value={{\n    getQuery: (q) => setQuery(q),\n    query: query,\n    movies: movies \n  }}>\n    {children}\n  </ContextSearch.Provider>;\n};\n\nexport default SearchContext;\n","import React, { useState, useRef, useEffect, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { ContextSearch } from '../context/SearchContext';\n\nconst Search = ({ history }) => {\n  const [input, setInput] = useState('');\n  const [showSearch, setShowSearch] = useState(false);\n  const refInput = useRef();\n  const node = useRef();\n\n  /** search movie  */\n  const contextSearch = useContext(ContextSearch);\n  const {  getQuery } = contextSearch;\n\n  /** hidden from if not focused */\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClick);\n    return () => document.removeEventListener('mousedow', handleClick);\n  }, []);\n\n  const handleClick = e => {\n    if (node.current) {\n      if (node.current.contains(e.target)) return;\n      setShowSearch(false);\n    }\n  };\n  \n  React.useEffect(() => {\n    if(!showSearch) return;\n    refInput.current.focus()\n  }, [showSearch])\n\n  const searchMovie = e => {\n    e.preventDefault();\n    if(!input) return;\n    getQuery(input);\n    history.push(`/search/${input}`);\n    setInput('');\n  };\n\n  return (\n    <>\n      <form className=\"search\" onSubmit={searchMovie} ref={node}>\n        <button className=\"btn search__button\" onClick={() => setShowSearch(true)}>\n          <i className=\"fas fa-search\"></i>\n        </button>\n        <section className={`${ !showSearch ? 'search__input' : 'search__input search__input--show' }`}>\n          <input\n            type=\"text\"\n            placeholder=\"Search Movie...\"\n            value={input}\n            ref={refInput}\n            onChange={e => setInput(e.target.value)}\n          />\n        </section>\n      </form>\n    </>\n  );\n};\n\nexport default withRouter(Search);\n","import React from 'react';\n\nconst Title = ({title, subtitle}) => {\n  return (\n  <div className=\"title\">\n    {subtitle ? <h2>{subtitle}</h2> : null}\n    <h1>{title}</h1>\n  </div>\n  )\n}\n\nexport default Title;","import React from 'react';\nimport Search from '../components/Search';\nimport Title from './Title';\nconst Header = ({title, subtitle}) => {\n  return (\n    <header className=\"header\">\n      <Search />\n      <Title title={title} subtitle={subtitle} />\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useState, useEffect } from 'react';\n\nexport const ContextCategories = React.createContext();\n\nconst CategoriesContext = props => {\n  const [genres, setGenres] = useState([]);\n\n  useEffect(() => {\n    const fetchApi = async () => {\n      const response = await fetch(\n        'https://api.themoviedb.org/3/genre/movie/list?api_key=bf7a0d7e84fbc649f8d6f2819491a0d6&language=en-US'\n      );\n      const data = await response.json();\n      setGenres(data.genres);\n    };\n\n    fetchApi();\n  }, []);\n\n  return (\n    <ContextCategories.Provider value={{ genres: genres }}>\n      {props.children}\n    </ContextCategories.Provider>\n  );\n};\n\nexport default CategoriesContext;\n","import React, {createContext, useState, useEffect} from 'react'\n\nexport const ContextGenres = createContext();\nconst GenresContext = props => {\n\n  const [genre, setGenre] = useState(null);\n  const [genresMovies, setGenresMovies] = useState([]);\n\n  useEffect(() => {\n    const fetchApi = async () => {\n      const url = `https://api.themoviedb.org/3/discover/movie?api_key=bf7a0d7e84fbc649f8d6f2819491a0d6&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=${genre}`\n      const response = await fetch(url);\n      const data = await response.json();\n      if (!data) return;\n\n      setGenresMovies(data.results);\n    };\n\n    fetchApi();\n  }, [genre]);\n\n\n  return (\n    <ContextGenres.Provider value={{\n      genresMovies: genresMovies,\n      genre: genre,\n      getGenre: (query) => setGenre(query)\n    }}>\n      {props.children}\n    </ContextGenres.Provider>\n  )\n}\n\nexport default GenresContext;","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport logo from '../utils/logo.svg';\n\nimport { ContextCategories } from '../context/CategoriesContext';\nimport { ContextGenres } from '../context/GenresContext';\n\nconst Sidebar = () => {\n  const contextCategories = useContext(ContextCategories);\n  const contextGenres = useContext(ContextGenres);\n\n  const { genres } = contextCategories;\n  const { getGenre } = contextGenres;\n\n  return (\n    <aside className=\"sidebar\">\n      <Link to=\"/\"><img src={logo} alt=\"logo\" /></Link>\n      <br />\n      <section className=\"sidebar__genres\">\n      <Link to=\"/series\"><small style={{margin: \"1rem 0 1rem 2rem\"}}><i className=\"fas fa-video\"></i> Series</small></Link>\n        {genres.map(genre => (\n          <Link to={`/genres/${genre.name.toLowerCase()}`} key={genre.id}>\n            <div className=\"sidebar__genres--item\" onClick={() => getGenre(genre.id)}>\n              <small><i className=\"fab fa-ioxhost\"></i>  {genre.name}</small>\n          </div>\n            </Link>\n        ))}\n      </section>\n    </aside>\n  );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport Header from './Header';\nimport Sidebar from '../components/Sidebar';\n\nexport default ({ title, children, subtitle }) => (\n  <div className=\"layout\">\n    <div className=\"container\">\n      <Header title={title} subtitle={subtitle} />\n      {/* <hr /> */}\n      {children}\n    </div>\n    <Sidebar />\n  </div>\n);\n","import React from 'react';\nimport { ContextMovies } from '../context/MoviesContext';\n\nconst Pagination = () => {\n  const contextMovies = React.useContext(ContextMovies);\n  const { prevPage, nextPage, page } = contextMovies;\n\n  return (\n    <div className=\"pagination\">\n      {page > 1 ? (\n        <button\n          className=\"btn pagination__button pagination__toLeft\"\n          onClick={prevPage}\n        >\n          <i className=\"fas fa-arrow-left\"></i>\n          &ensp;Prev\n        </button>\n      ) : null}\n      <button\n        className=\"btn pagination__button pagination__toLeft\"\n        onClick={nextPage}\n      >\n        Next&ensp;\n        <i className=\"fas fa-arrow-right\"></i>\n      </button>\n    </div>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport Movie from './Movie';\nimport Container from '../containers/Container';\nimport Pagination from '../containers/Pagination';\n\nconst ListMovie = ({ movies, title, subtitle }) => {\n  return (\n    <Container title={title} subtitle={subtitle}>\n      <div className=\"wrapper__movies\">\n        {movies.map(movie => (\n          <Movie\n            key={movie.id}\n            id={movie.id}\n            title={movie.title}\n            url={movie.poster_path}\n          />\n        ))}\n      </div>\n      <Pagination />\n    </Container>\n  );\n};\n\nexport default ListMovie;\n","import React, { useContext } from 'react';\nimport ListMovie from '../components/ListMovie';\nimport { ContextMovies } from '../context/MoviesContext';\n\nconst Discover = () => {\n  const contextMovies = useContext(ContextMovies);\n  const { movies } = contextMovies;\n\n  return <ListMovie movies={movies} title=\"Discover Movies\" />;\n};\n\nexport default Discover;\n","import React, { useContext, useEffect } from 'react';\nimport { ContextMovies } from '../context/MoviesContext';\nimport Container from '../containers/Container';\n\nconst DetailMovie = type => {\n  const { current} = useContext(ContextMovies);\n\n  const [movie, setMovie] = React.useState([]);\n\n  useEffect(() => {\n    const fetchApi = async () => {\n      if (!current) return;\n      const response = await fetch(\n        `https://api.themoviedb.org/3/movie/${current}?api_key=bf7a0d7e84fbc649f8d6f2819491a0d6&language=en-US`\n      );\n      const data = await response.json();\n\n      if (response.status !== 200) return;\n      setMovie(data);\n    };\n\n    fetchApi();\n  }, [current]);\n\n  return (\n    <Container>\n      <section className=\"wrapper__movie\">\n        <img\n          src={current ? `https://image.tmdb.org/t/p/original/${movie.backdrop_path}` : ''}\n          alt={movie.title}\n        />\n        <article>\n          <h1>{movie.title}</h1>\n          <p>{movie.overview}</p>\n          <button>Trailer</button>\n        </article>\n      </section>\n    </Container>\n  );\n};\n\nexport default DetailMovie;\n","import React from 'react';\nimport image from '../utils/not-found.jpg';\nimport { Link } from 'react-router-dom';\n\nexport default () => {\n  return (\n    <Link to=\"/\">\n      <img src={image} alt=\"not-found\" />\n    </Link>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport { ContextSearch } from '../context/SearchContext';\nimport ListMovie from './ListMovie';\n\nconst SearchMovie = () => {\n  const contextSearch = useContext(ContextSearch);\n  const { movies, query } = contextSearch;\n\n  return <ListMovie movies={movies} title=\"Search Movie\" subtitle={query} />\n};\n\nexport default SearchMovie;\n","import React from 'react';\nimport ListMovie from './ListMovie';\nimport { ContextGenres } from '../context/GenresContext';\nimport { useContext } from 'react';\nimport {ContextCategories} from '../context/CategoriesContext';\n\nconst Genres = () => {\n  const contextGenres = useContext(ContextGenres);\n  const contextCategories = useContext(ContextCategories);\n  \n  const { genresMovies, genre} = contextGenres;\n  const { genres } = contextCategories;\n\n  let subtitle = genres.find(g => g.id === genre)\n\n  return (\n      <ListMovie movies={genresMovies} title=\"Genres\" subtitle={genre ? subtitle.name : '' } />\n  );\n};\n\nexport default Genres;\n","import React, { useState, createContext, useEffect } from 'react';\n\nexport const ContextSeries = createContext();\nconst SeriesContext = props => {\n\n  const [series, setSeries] = useState([]);\n\n  useEffect(() => {\n    const fetchApi = async () => {\n      const url = `https://api.themoviedb.org/3/discover/tv?api_key=bf7a0d7e84fbc649f8d6f2819491a0d6&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&include_null_first_air_dates=false`;\n      const response = await fetch(url);\n      const data = await response.json();\n      if (!data) return;\n\n      setSeries(data.results);\n    };\n\n    fetchApi();\n  }, []);\n\n  return (\n    <ContextSeries.Provider value={{\n      series: series,\n    }}>\n      {props.children}\n    </ContextSeries.Provider>\n  )\n}\n\nexport default SeriesContext;","import React, { useContext } from 'react';\nimport ListMovies from './ListMovie';\nimport { ContextSeries } from '../context/SeriesContext';\n\nconst Series = () => {\n\n  const contextSeries = useContext(ContextSeries);\n  const {series} = contextSeries;\n  console.log(series);\n\n  return (\n    <ListMovies movies={series} title=\"Discover\" subtitle=\"Series\" />\n  );\n};\n\nexport default Series;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Router } from 'react-router-dom';\nimport history from './history';\n\nimport Discover from './containers/Discover';\nimport DetailMovie from './components/DetailMovie';\nimport NotFound from './containers/NotFound';\nimport SearchMovie from './components/SearchMovie';\nimport Genres from './components/Genres';\n//Context\nimport MoviesContext from './context/MoviesContext';\nimport CategoriesContext from './context/CategoriesContext';\nimport SearchContext from './context/SearchContext';\nimport Series from './components/Series';\nimport SeriesContext from './context/SeriesContext';\nimport GenresContext from './context/GenresContext';\n\nconst App = () => {\n  return (\n    <MoviesContext>\n      <SeriesContext>\n        <CategoriesContext>\n          <GenresContext>\n            <SearchContext>\n              <Router history={history}>\n                <Switch>\n                  <Route path=\"/\" exact component={Discover} />\n                  <Route path=\"/detail-movie/:id\" component={DetailMovie} />\n                  <Route path=\"/search/:id\" component={SearchMovie} />\n                  <Route path=\"/genres/:id\" component={Genres} />\n                  <Route path=\"/series\" component={Series} />\n                  <Route path=\"/404\" component={() => <NotFound />} />\n                </Switch>\n              </Router>\n            </SearchContext>\n          </GenresContext>\n        </CategoriesContext>\n      </SeriesContext>\n    </MoviesContext>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}